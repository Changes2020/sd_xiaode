
如果CSS可以做到，就不要使用JS,共性的样式提取出来写

1. 常用语义化标签：header nav section footer

2. 块级元素：
    div、h1~h6、form、hr、menu、p、table、ul
    特点：总是在新行上开始，高度、行高以及上下边距都可控制，宽度默认是容器的100%，除非设定宽度。
    功能：主要是用来搭建网站架构、网页布局、承载内容。

3. 行内元素：
    span、a、b、br、i、img、input、label、select
    特点：和其他元素都在一行上，高、行高、以及上下边距不可变，宽度就是它的文字和图片的宽度，不可改变。

4. 嵌套规则：
    1、块级元素与块级元素平级、内嵌元素与内嵌元素平级
    2、块级元素可以包含内联元素或某些块元素，但是内联元素不能包含块元素，它只能包含其他的内联元素。
    3、行内元素尽量避免嵌套相同标签：如<span><span>312</span></span>
    4、h1~h6 和 p：文本段落，不可嵌套其他块级元素
    5、li标签可以包含标签，因为li和div标签都是装载内容的容器。

5. 全局样式修改：
    在需要修改的全局样式前面添加一个私有class名，如wrap,用法：.wrap :global(.am){}

6. css代码格式：

    先显示定位布局类属性，后盒模型等自身属性，最后是文本类及修饰类属性
        .m-box{position:relative;width:600px;margin:0 auto 10px;text-align:center;color:#000;}

    先写带有浏览器私有标志的，后写W3C标准的。
        .m-box{-webkit-box-shadow:0 0 0 #000;-moz-box-shadow:0 0 0 #000;box-shadow:0 0 0 #000;}

    详细可参考：http://fe4han.github.io/demo/css/order_your_css.html

7. CSS规范 - 分类方法

    我们按照CSS的性质和用途，将CSS文件分成“公共型样式”、“特殊型样式”、“皮肤型样式”，并以此顺序引用。

        公共型样式（global.css）：包括了以下几个部分：“标签的重置和设置默认值”、“统一调用背景图和清除浮动或其他需统一处理的长样式”、“网站通用布局”、“通用模块和其扩展”、“元件和其扩展”、“功能类样式”、“皮肤类样式”。
        特殊型样式（index.css）：当某个栏目或页面的样式与网站整体差异较大或者维护率较高时，可以独立引用一个样式：“特殊的布局、模块和元件及扩展”、“特殊的功能、颜色和背景”，也可以是某个大型控件或模块的独立样式。
        皮肤型样式（skin.css）：如果产品需要换肤功能，那么我们需要将颜色、背景等抽离出来放在这里。

    CSS内部的分类及其顺序

        布局（grid）（.g-）：将页面分割为几个大块，通常有头部、主体、尾部等！
        模块（module）（.m-）：通常是一个语义化的可以重复使用的较大的整体！比如导航、登录、注册、列表、搜索等！
        元件（unit）（.u-）：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！
        功能（function）（.f-）：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！
        皮肤（skin）（.s-）：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！
        状态（.z-）：为状态类样式加入前缀，统一标识，方便识别，她只能组合使用或作为后代出现（.u-bnt.z-dis{}，.m-list li.z-sel{}）。


8. CSS规范 - 命名规则

    考虑样式复用性，使用类选择器，放弃ID选择器

    样式前缀命名：

        布局（grid）（.g）；
        模块（module）（.m-）；
        元件（unit）（.u-）；
        功能（function）（.f-）；
        皮肤（skin）（.s-）；
        状态（.z-）。

    后代选择器：.m-login .btn{}。

    后代选择器扩展：.m-login .btn-1{}，.m-login .btn-dis{}。

    通过使用后代选择器的方法，你不需要考虑他的命名是否已被使用，因为他只在当前模块或元件中生效，同样的样式名可以在不同的模块或元件中重复使用，互不干扰；在多人协作或者分模块协作的时候效果尤为明显！
    .m-login .cnt{margin:1px;padding:1px;}
    .m-page .cnt{text-align:center;}

    注：基类自身可以独立使用（如：class="m-list"即可），扩展类必须基于基类使用（如：class="m-list m-list-2"）。

       为防止后代选择器的扩展类和大类命名规范冲突，后代选择器不允许使用单个字母。
       比如：.m-list .a{}是不允许的，因为当这个.a需要扩展的时候就会变成.a-bb，这样就和大类的命名规范冲突。

    当模块或元件之间互相嵌套，且使用了相同的标签选择器或其他后代选择器，那么里面的选择器就会被外面相同的选择器所影响。所以，如果你的模块或元件可能嵌套或被嵌套于其他模块或元件，那么要慎用标签选择器，必要时采用类选择器，并注意命名方式，可以采用.m-layer .layerxxx、.m-list2 .list2xxx的形式来降低后代选择器的污染性。

～～～需要完善的地方很多，多多指教～～～
